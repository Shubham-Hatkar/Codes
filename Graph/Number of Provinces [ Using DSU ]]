// Number of Provinces
// https://practice.geeksforgeeks.org/problems/number-of-provinces/1

class Disjoint
{
    int parent[];
    int size[];
    
    Disjoint (int v)
    {
        parent = new int[v+1];
        size = new int[v+1];
        for(int i = 0; i <= v; i++)
        {
            parent[i] = i;
            size[v] = 1;
        }
    }
    int find(int v)
    {
        if(parent[v] == v) return v;
        return parent[v] = find(parent[v]);
    }
    void Union(int a, int b)
    {
        a = find(a);
        b = find(b);
        if(a != b)
        {
            if(size[a] < size[b])
            {
                 parent[a] = b;
                 size[b] = size[b] + size[a];
            }
            else 
            {
                parent[b] = a;
                size[a] += size[b];
            }
        }
    }
}
class Solution 
{
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) 
    {
        Disjoint ds = new Disjoint(V);
        
        for(int i = 0; i < adj.size(); i++)
        {
            for(int j = 0; j < adj.get(i).size(); j++)
            {
                if(adj.get(i).get(j) == 1) ds.Union(i,j);
            }
        }
        
        int count = 0;
        for(int i = 0; i < V; i++)
        {
            if(ds.find(i) == i) count++;
        }
        return count;
    }
};
