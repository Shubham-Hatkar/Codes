// 695. Max Area of Island
// https://leetcode.com/problems/max-area-of-island/description/

class Solution 
{
    private int dir[][] = {{0,-1}, {-1,0}, {0,1}, {1,0}};
    private int BFS(int sr, int sc, int grid[][], boolean vis[][])
    {
        int rows = grid.length;
        int cols = grid[0].length;

        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{sr,sc});
        vis[sr][sc] = true;

        int count = 1;
        while(!q.isEmpty())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                int temp[] = q.remove();
                int r = temp[0];
                int c = temp[1];

                for(int j = 0; j < 4; j++)
                {
                    int nr = r + dir[j][0];
                    int nc = c + dir[j][1];

                    if(nr >= rows || nc >= cols || nr < 0 || nc < 0) continue;

                    if(vis[nr][nc] == false && grid[nr][nc] == 1)
                    {
                        count++;
                        vis[nr][nc] = true;
                        q.add(new int[]{nr,nc});
                    }
                }
            }
        }
        return count;
    }
    private int DFS(int sr, int sc, int grid[][], boolean vis[][])
    {
        int rows = grid.length;
        int cols = grid[0].length;

        vis[sr][sc] = true;
        int count = 1;

        for(int i = 0; i < 4; i++)
        {
            int nr = sr + dir[i][0];
            int nc = sc + dir[i][1];

            if(nr >= rows || nc >= cols || nr < 0 || nc < 0) continue;

            if(vis[nr][nc] == false && grid[nr][nc] == 1)
            {
                count += DFS(nr,nc,grid,vis);
            } 
        }
        return count;
    }
    public int maxAreaOfIsland(int[][] grid) 
    {
        int rows = grid.length;
        int cols = grid[0].length;

        boolean vis[][] = new boolean[rows][cols];
        int maxArea = 0;

        for(int i = 0; i < rows; i++)
        {
            for(int j = 0; j < cols; j++)
            {
                if(vis[i][j] == false && grid[i][j] == 1)
                {
                    int Area = DFS(i, j, grid, vis); // Use DFS or BFS here .. 2 functions written
                    maxArea = Math.max(Area,maxArea);
                }
            }
        }
        return maxArea;
    }
}
