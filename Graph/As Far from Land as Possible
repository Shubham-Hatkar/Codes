// 1162. As Far from Land as Possible
// https://leetcode.com/problems/as-far-from-land-as-possible/description/

class Solution 
{
    public int maxDistance(int[][] grid) 
    {
        int n = grid.length;
        int m = grid[0].length;

        boolean vis[][] = new boolean[n][m];
        Queue<int[]> q = new LinkedList<>();
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 1)
                {
                    q.add(new int[]{i,j});
                    vis[i][j] = true;
                }
            }
        }

        // If all are 1 or only water or only land is present.
        if(q.size() == 0 || q.size() == n * m) return -1;

        int dir[][] = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        int level = -1;
        while(!q.isEmpty())
        {
            boolean flag = false;
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                int temp[] = q.remove();
                int r = temp[0];
                int c = temp[1];

                for(int j = 0; j < 4; j++)
                {
                    int nr = r + dir[j][0];
                    int nc = c + dir[j][1];

                    if(nr >= n || nc >= m || nr < 0 || nc < 0) continue;
                    if(vis[nr][nc] == false)
                    {
                        q.add(new int[]{nr,nc});
                        vis[nr][nc] = true;
                    }
                }
            }
            level++;
        }
        return level;
    }
}
