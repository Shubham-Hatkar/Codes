// Detect cycle in an undirected graph
// https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article



lass Solution 
{
    boolean BFS(int src, ArrayList<ArrayList<Integer>> adj, boolean vis[], int parent[] )
    {
        Queue<Integer> q = new LinkedList<>();
        q.add(src);
        vis[src] = true;
        parent[src] = -1;
        while(!q.isEmpty())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                int temp = q.remove();
                
                for(int nbr : adj.get(temp))
                {
                    if(vis[nbr] == false)
                    {
                        q.add(nbr);
                        vis[nbr] = true;
                        parent[nbr] = temp;
                    }
                    else if(vis[nbr] == true && nbr != parent[temp])
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        boolean vis[] = new boolean[V];
        int parent[] = new int[V];
        for(int i = 0; i < V; i++)
        {
            if(vis[i] == false)
            {
                if(BFS(i, adj, vis, parent)) return true;
            }
        }
        return false;
    }
}
