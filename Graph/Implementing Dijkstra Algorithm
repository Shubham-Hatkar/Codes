// Implementing Dijkstra Algorithm
// https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> graph, int src)
    {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> Integer.compare(a[0],b[0]));
        
        int distance[] = new int[V];
        for(int i = 0; i < V; i++) distance[i] = Integer.MAX_VALUE;
        
        distance[src] = 0;
        pq.add(new int[]{distance[src], src}); // distance, node
        
        while(!pq.isEmpty())
        {
            int temp[] = pq.remove();
            int node_dist = temp[0];
            int node = temp[1];
            
            //if(distance[node] < node_dist) continue;
            
            for(ArrayList<Integer> edge : graph.get(node))
            {
                int nbr = edge.get(0);
                int wt = edge.get(1);
                
                if(distance[nbr] > distance[node] + wt)
                {
                    distance[nbr] = distance[node] + wt;
                    pq.add(new int[]{distance[nbr], nbr});
                }
            }
        }
        return distance;
    }
}


