// Alien Dictionary
// https://practice.geeksforgeeks.org/problems/alien-dictionary/1

class Solution
{
    public String findOrder(String [] dict, int N, int K)
    {
        ArrayList<Integer>[] graph = new ArrayList[K];
        for(int i = 0; i < K; i++) 
            graph[i] = new ArrayList<>();
        
        
        // We are taking two strings for comparing
        for(int i = 0; i < N - 1; i++)
        {
            String s = dict[i];
            String t = dict[i+1];
            
            int size = Math.min(s.length(), t.length());
            for(int j = 0; j < size; j++)
            {
                if(s.charAt(j) != t.charAt(j))
                {
                    graph[s.charAt(j) - 'a'].add(t.charAt(j) - 'a'); // Integer Format
                    break;
                }
            }
        }
        
        // ******** STANDARD TOPOLOGICAL SORT **********
        
        int indegree[] = new int[K];
        for(int i = 0; i < K; i++)
        {
            for(int e : graph[i]) indegree[e]++;
        }
        
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < K; i++)
        {
            if(indegree[i] == 0) q.add(i);
        }
        
        int ans[] = new int[K];
        int idx = 0;
        while(!q.isEmpty())
        {
            int temp = q.remove();
            ans[idx] = temp;
            idx++;
            
            for(int nbr : graph[temp])
            {
                indegree[nbr]--;
                if(indegree[nbr] == 0) q.add(nbr);
            }
        }
        
        
        String res = "";
        for(int i = 0; i < K; i++)
        {
            res += (char)(ans[i] + 'a');
        }
        return res;
    }
}
