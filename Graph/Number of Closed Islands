// 1254. Number of Closed Islands
// https://leetcode.com/problems/number-of-closed-islands/description/

class Solution 
{
    int dir[][] = {{-1,0}, {0,-1}, {1,0}, {0,1}};
    private void BFS(int sr, int sc, int grid[][], boolean vis[][])
    {
        int n = grid.length; 
        int m  = grid[0].length;

        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{sr,sc});
        vis[sr][sc] = true;

        boolean flag = true;
        while(!q.isEmpty())
        {
            int temp[] = q.remove();
            int r = temp[0];
            int c = temp[1];

            for(int i = 0; i < 4; i++)
            {
                int nr = r + dir[i][0];
                int nc = c + dir[i][1];

                if(nr >= n || nc >= m || nr < 0 || nc < 0) continue;

                if(vis[nr][nc] == false && grid[nr][nc] == 0)
                {
                    q.add(new int[]{nr,nc});
                    vis[nr][nc] = true;
                }
            }
        }
    }
    public int closedIsland(int[][] grid) 
    {
        int n = grid.length; 
        int m  = grid[0].length;
        boolean vis[][] = new boolean[n][m];

        for(int i = 0; i < m; i++)
        {
            if(vis[0][i] == false && grid[0][i] == 0) BFS(0,i,grid,vis);
            if(vis[n-1][i] == false && grid[n-1][i] == 0) BFS(n-1,i,grid,vis);
        }
        for(int i = 0; i < n; i++)
        {
            if(vis[i][0] == false && grid[i][0] == 0) BFS(i, 0, grid, vis);
            if(vis[i][m-1] == false && grid[i][m-1] == 0) BFS(i, m-1, grid, vis);
        }
        int count = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j ++)
            {
                if(vis[i][j] == false && grid[i][j] == 0)
                {
                    BFS(i, j, grid, vis);
                    count++;
                }
            }
        }
        return count;
    }
}
