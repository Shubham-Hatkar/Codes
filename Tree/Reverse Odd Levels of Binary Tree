// 2415.Reverse Odd Levels of Binary Tree
// https://leetcode.com/problems/reverse-odd-levels-of-binary-tree/description/

class Solution 
{
    private void reverse(Queue<TreeNode> q)
    {
        int size = q.size();
        Queue<TreeNode> temp = new LinkedList<>(q);
        Stack<Integer> st = new Stack<>();
        while(!temp.isEmpty()) st.push(temp.remove().val);
        for(TreeNode key : q) key.val = st.pop();
    }
    public TreeNode reverseOddLevels(TreeNode root) 
    {
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        int level = 0;
        while(!q.isEmpty())
        {
            int size = q.size();
            for(int i=0; i<size; i++)
            {
                TreeNode temp = q.remove();

                if(temp.left != null) q.add(temp.left);
                if(temp.right != null) q.add(temp.right);
            }
            level++;
            if(level % 2 == 1) reverse(q);
        }
        return root;
    }
}
