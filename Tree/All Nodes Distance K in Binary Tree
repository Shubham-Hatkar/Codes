// 863.All Nodes Distance K in Binary Tree
// https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/

class Solution 
{
    private void AssignParents(TreeNode root, HashMap<TreeNode, TreeNode> parent)
    {
        if(root == null) return;
        if(root.left != null) parent.put(root.left, root);
        if(root.right != null) parent.put(root.right, root);
        AssignParents(root.left, parent);
        AssignParents(root.right, parent);
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) 
    {
        HashMap<TreeNode, TreeNode> parent = new HashMap<>();
        parent.put(root,null);
        AssignParents(root, parent);

        Queue<TreeNode> q = new LinkedList<>();
        q.add(target);

        Set<TreeNode> set = new HashSet<>();
        List<Integer> ans = new ArrayList<>();
        int level = 0;
        while(!q.isEmpty())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                TreeNode temp = q.remove();
                set.add(temp);
                if(level == k) ans.add(temp.val);

                if(temp.left != null && !set.contains(temp.left)) q.add(temp.left);
                if(temp.right != null && !set.contains(temp.right)) q.add(temp.right);
                if(parent.get(temp) != null && !set.contains(parent.get(temp))) q.add(parent.get(temp));
            }
            level++;
        }
        return ans;
    }
}
