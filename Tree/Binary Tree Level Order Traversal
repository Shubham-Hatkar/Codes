// 102. Binary Tree Level Order Traversal
// https://leetcode.com/problems/binary-tree-level-order-traversal/description/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    public List<List<Integer>> levelOrder(TreeNode root) 
    {
        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root == null) return ans;
        q.add(root);
        
        while(q.size() > 0)
        {
            // check for current level
            int size = q.size();
            List<Integer> level = new ArrayList<>(); // for storing nodes at current level
            for(int i=0; i<size; i++)
            {
                // 1.remove 
                TreeNode temp = q.remove();

                // 2.print
                level.add(temp.val);

                // 3.add into q
                if(temp.left != null) q.add(temp.left);
                if(temp.right != null) q.add(temp.right);
            }
            // add into ans
            ans.add(level);
        }
        return ans;
    }
}










