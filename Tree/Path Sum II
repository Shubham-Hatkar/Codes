// 113. Path Sum II
// https://leetcode.com/problems/path-sum-ii/description/

class Solution 
{
    public void solve(TreeNode root, int targetsum, List<List<Integer>> ans , List<Integer> path)
    {
        if(root == null) return;
        if(root.left == null && root.right == null)
        {
            if(targetsum - root.val == 0)
            {
                path.add(root.val);
                List<Integer> temp = new ArrayList<>(path);
                ans.add(temp);
                path.remove(path.size()-1);
                return;
            }
        }

        path.add(root.val);
        solve(root.left, targetsum - root.val, ans, path);
        solve(root.right, targetsum - root.val, ans, path);
        path.remove(path.size()-1);
    }
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) 
    {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        solve(root, targetSum, ans, path);
        return ans;
    }
}
