// leetcode - 103. Binary Tree Zigzag Level Order Traversal
// https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/

class Solution 
{
    // function for reversing arraylist
    public List<Integer> reverse(List<Integer> al)
    {
        List<Integer> b = new ArrayList<>();
        for(int i=al.size()-1; i>=0; i--)
        {
            b.add(al.get(i));
        }
        return b;
    }
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) 
    {
        // use the logic of level order traversal (RPA)
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null) return ans;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        boolean isLeftToRight = true; //this is for r -> l and l -> r
        while(q.size() > 0)
        {
            int size = q.size();
            List<Integer> level = new ArrayList<>();
            
            for(int i=0; i<size; i++)
            {
                // 1. Remove
                TreeNode temp = q.remove();
                // 2. Print(add in ans)
                level.add(temp.val);

                if(temp.left != null) q.add(temp.left);
                if(temp.right != null) q.add(temp.right);
            }
            // 3. add
            if(isLeftToRight == false) level = reverse(level);
            ans.add(level);
            isLeftToRight = !isLeftToRight; 
        }
        return ans;
    }
}
