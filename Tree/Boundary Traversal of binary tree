// Boundary Traversal of binary tree

class Solution
{
    // left
    void leftBoundary(Node root, ArrayList<Integer> left)
    {
        if(root == null) return;
        
        if(root.left != null)
        {
            left.add(root.data);
            leftBoundary(root.left, left);
        }
        else if(root.right != null)
        {
            left.add(root.data);
            leftBoundary(root.right, left);
        }
    }
    
    // right
    void rightBoundary(Node root, ArrayList<Integer> right)
    {
        if(root == null) return;
        
        if(root.right != null)
        {
            right.add(root.data);
            rightBoundary(root.right, right);
        }
        else if(root.left != null)
        {
            right.add(root.data);
            rightBoundary(root.left, right);
        }
    }
    
    // leaf
    void leaf(Node root, ArrayList<Integer> leaf)
    {
        if(root == null) return;
        
        if(root.right == null && root.left == null) leaf.add(root.data);
        
        leaf(root.left, leaf);
        leaf(root.right, leaf);
        
    }
	ArrayList <Integer> boundary(Node root)
	{
	    //answer arrayList ->
	    ArrayList<Integer> ans = new ArrayList<>();
	    
	    // base case
	    if(root.left == null && root.right == null)
	    {
	        ans.add(root.data);
	        return ans;
	    }
	    
	    // 1. left boundaries
	    ArrayList<Integer> left = new ArrayList<>();
	    leftBoundary(root.left,left);
	    
	    // 2. right boundaries
	    ArrayList<Integer> right = new ArrayList<>();
	    rightBoundary(root.right,right);
	    
	    // 3.leaf
	    ArrayList<Integer> leaf = new ArrayList<>();
	    leaf(root,leaf);
	    
	    ans.add(root.data);
	    
	    for(int i=0; i<left.size(); i++) ans.add(left.get(i));
	    for(int i=0; i<leaf.size(); i++) ans.add(leaf.get(i));
	    for(int i=right.size()-1; i>=0; i--) ans.add(right.get(i));
	    
	    return ans;
	}
}
