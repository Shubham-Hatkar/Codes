// 662. Maximum Width of Binary Tree
// https://leetcode.com/problems/maximum-width-of-binary-tree/description/


class Pair
{
    TreeNode node;
    int scale;
    Pair(TreeNode node, int scale)
    {
        this.node = node;
        this.scale = scale;
    }
}
class Solution 
{
    public int widthOfBinaryTree(TreeNode root) 
    {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root,0));
        int ans = 0;
        while(q.size() > 0)
        {
            // current level
            int size = q.size();
            int min = q.peek().scale;
            int first = 0, last = 0;
            for(int i=0; i<size; i++)
            {
                Pair info = q.remove();
                TreeNode temp = info.node;
                int curr_scale = info.scale - min;

                if(i==0) first = curr_scale;
                if(i == size-1) last = curr_scale;

                if(temp.left != null) q.add(new Pair(temp.left,curr_scale*2+1));
                if(temp.right != null) q.add(new Pair(temp.right,curr_scale*2+2));
            }
            ans = Math.max(ans, last-first+1);
        }
        return ans;
    }
}
