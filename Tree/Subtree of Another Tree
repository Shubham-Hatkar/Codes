// Subtree of Another Tree
// https://leetcode.com/problems/subtree-of-another-tree/description/

class Solution 
{
    // this is for checking if two trees are identical
    private boolean isSame(TreeNode root, TreeNode subroot)
    {
        if(root == null && subroot == null) return true;
        if(root == null || subroot == null) return false;
        if(root.val != subroot.val) return false;
        return isSame(root.left, subroot.left) && isSame(root.right, subroot.right);
    }
    public boolean isSubtree(TreeNode root, TreeNode subRoot) 
    {
        // find the starting node according to root of second tree and check if two trees are
        // identical or not.
        if(root == null && subRoot == null) return true;
        if(root == null || subRoot == null) return false;

        if(root.val == subRoot.val)
        {
            if(isSame(root,subRoot)) return true;
        }

        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
    }
}
