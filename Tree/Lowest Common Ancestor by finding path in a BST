// Lowest Common Ancestor in a BST
// https://practice.geeksforgeeks.org/problems/lowest-common-ancestor-in-a-bst/1

class BST
{   
    void findPath(Node root, int target, ArrayList<Node> path)
    {
        if(root == null) return;
        if(root.data == target)
        {
            path.add(root);
            return;
        }
        if(root.data < target)
        {
            path.add(root);
            findPath(root.right, target, path);
        }
        else if(root.data > target)
        {
            path.add(root);
            findPath(root.left, target, path);
        }
    }
	Node LCA(Node root, int n1, int n2)
	{
        ArrayList<Node> path1 = new ArrayList<>();
        ArrayList<Node> path2 = new ArrayList<>();
        findPath(root, n1, path1);
        findPath(root, n2, path2);
        Node ans = null;
        for(int i = 0; i < Math.min(path1.size(),path2.size()); i++)
        {
            if(path1.get(i) == path2.get(i)) ans = path1.get(i);
            else break;
        }
        return ans;
    }
    
}
