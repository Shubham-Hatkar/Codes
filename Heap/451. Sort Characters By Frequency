// 451. Sort Characters By Frequency
// https://leetcode.com/problems/sort-characters-by-frequency/description/


class Solution 
{
    public String frequencySort(String s) 
    {
        // collect char and its freq
        HashMap<Character,Integer> hm = new HashMap<>();
        for(int i = 0; i < s.length(); i++)
        {
            char ch = s.charAt(i);
            hm.put(ch, hm.getOrDefault(ch, 0) + 1);
        }

        // characters are repeated so we need unique char
        // hashmap keys are unique char
        ArrayList<Character> keys = new ArrayList<>(hm.keySet());

        // Define max pq
        PriorityQueue<Character> pq = new PriorityQueue<>(
            (a,b) -> Integer.compare(hm.get(b),hm.get(a)));

        // add keys (char)
        for(char ch : keys)
        {
            pq.add(ch);
        }
        
        // get max freq char first and add to ans.
        StringBuilder sb = new StringBuilder();
        while(pq.size() > 0)
        {
            char ch = pq.remove();
            int freq = hm.get(ch);
            while(freq-- > 0) sb.append(ch);
        }
        return sb.toString();
    }
}
