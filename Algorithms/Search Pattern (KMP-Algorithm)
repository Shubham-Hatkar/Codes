// Search Pattern (KMP-Algorithm)
// https://practice.geeksforgeeks.org/problems/search-pattern0205/1

class Solution
{
    private int[] prefixStr(String s)
    {
        int n = s.length();
        int arr[] = new int[n];
        arr[0] = 0;
        int len = 0;
        for(int i = 1; i < n; i++)
        {
            if(s.charAt(i) == s.charAt(len))
            {
                len++;
                arr[i] = len;
            }
            else
            {
                if(len == 0) arr[i] = len;
                else len = arr[len-1];
            }
        }
        return arr;
    }
    ArrayList<Integer> search(String pat, String txt)
    {
        int prefix[] = prefixStr(pat);
        
        ArrayList<Integer> ans = new ArrayList<>();
        int i = 0;
        int j = 0;
        boolean flag = false;
        while(i < txt.length())
        {
            if(pat.charAt(j) == txt.charAt(i))
            {
                i++;
                j++;
            }
            if(j == pat.length())
            {
                flag = true;
                ans.add(i - j + 1);
                j = prefix[j-1];
            }
            else if(i < txt.length() && pat.charAt(j) != txt.charAt(i))
            {
                if(j!=0) j = prefix[j-1];
                else i++;
            }
        }
        if(flag == false) 
        {
            ans.add(-1);
            return ans;
        }
        return ans;
    }
}
