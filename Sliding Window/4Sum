// 18. 4Sum
// https://leetcode.com/problems/4sum/description/

class Solution 
{
    public List<List<Integer>> fourSum(int[] nums, int target) 
    {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        int n = nums.length;
        for(int i = 0; i < n-3; i++)
        {
            for(int j = i + 1; j < n-2; j++)
            {
                long remaining_target = (long)target - (long)nums[i] - (long)nums[j];
                int left = j + 1;
                int right = n - 1;
                while(left < right)
                {
                    int twosum = nums[left] + nums[right];
                    if(twosum == remaining_target)
                    {
                        List<Integer> list = new ArrayList<>();
                        list.add(nums[i]);
                        list.add(nums[j]);
                        list.add(nums[left]);
                        list.add(nums[right]);
                        ans.add(list);
                        left++;
                        right--;
                        while(left < right && nums[left] == nums[left - 1]) left++;
                        while(right > left && nums[right] == nums[right + 1]) right--;
                    }
                    else if(twosum > remaining_target) right--;
                    else left++;
                }
                while(j + 1 < n && nums[j] == nums[j + 1]) j++;
            }
            while(i + 1 < n && nums[i] == nums[i + 1]) i++;
        }
        return ans;
    }
}
