// 56. Merge Intervals
// https://leetcode.com/problems/merge-intervals/description/

class Solution 
{
    public int[][] merge(int[][] intervals) 
    {
        
        //sort the array based on 1st position
        Arrays.sort(intervals, (x,y) -> x[0] - y[0]);
        //starting and ending points
        int prevStart = intervals[0][0];
        int prevEnd = intervals[0][1];

        ArrayList<Integer> A = new ArrayList<>();
        int rows = intervals.length; // no. of rows
        for(int i=0; i<rows; i++)
        {
            //take current start and current end
            int currStart = intervals[i][0];
            int currEnd  = intervals[i][1];

            //if current start is lesser than or equal to previous end then merging is possible
            if(currStart <= prevEnd)
            {
                //update the end
                prevEnd = Math.max(prevEnd, currEnd);
            }
            else
            {
                A.add(prevStart);
                A.add(prevEnd);
                prevStart = currStart;
                prevEnd = currEnd;
               
            }
        }
        A.add(prevStart);
        A.add(prevEnd);
        int ans[][] = new int[A.size()/2][2];
        int j = 0;
        int i = 0;
        while(i < A.size()/2)
        {
            ans[i][0] = A.get(j++);
            ans[i][1] = A.get(j++);
            i++;
        }
        return ans;
    }
}
