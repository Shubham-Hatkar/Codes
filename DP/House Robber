// 198. House Robber
// https://leetcode.com/problems/house-robber/description/

class Solution 
{
    // DP Memoization : - TC -> O(N), SC -> (2N [dp array + stack space(recursion)])
    private int solve(int idx, int arr[], int dp[])
    {
        if(idx < 0) return 0; // if idx - 2 goes below 0 so return 0.

        if(idx == 0) return arr[0]; // if we not pick idx1 then we will pick idx-0

        if(dp[idx] != -1) return dp[idx]; // if we already calculated.

        // pick and Not pick approach for subsequence.
        int pick = arr[idx] + solve(idx - 2, arr, dp);
        int notpick = 0 + solve(idx - 1, arr, dp);
        
        dp[idx] = Math.max(pick, notpick); // Need Maximum
        
        return dp[idx]; // Return maximum
    }

    // Tabulation : TC -> O(N), SC -> O(N)
    private int tabulation(int arr[], int n)
    {
        int dp[] = new int[n];
        dp[0] = arr[0];

        for(int i = 1; i < n; i++)
        {
            int pick = arr[i];
            if(i > 1) pick += dp[i-2];
            int notPick = 0 + dp[i-1];
            dp[i] = Math.max(pick, notPick);
        }
        return dp[n-1];
    }

    // Space Optimization : TC -> O(N), SC -> O(1)
    private int optimized(int arr[])
    {
        int n = arr.length;
        int prev = arr[0];
        int secondPrev = 0;
        int ans = arr[0];
        for(int i = 1; i < n; i++)
        {
            int pick = arr[i];
            if(i > 1) pick += secondPrev;
            int notPick = 0 + prev;
            ans = Math.max(ans,Math.max(pick,notPick));
            secondPrev = prev;
            prev = Math.max(pick,notPick);
        }
        return ans;
    }
    public int rob(int[] nums) 
    {
        // int n = nums.length;
        // int dp[] = new int[n+1];
        // Arrays.fill(dp, -1);
        // return solve(n-1, nums, dp);
        //return tabulation(nums, nums.length);
        return optimized(nums);
    }
}
