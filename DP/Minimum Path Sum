// 64. Minimum Path Sum
// https://leetcode.com/problems/minimum-path-sum/description/

class Solution 
{
    private int solve(int sr, int sc, int grid[][], int dp[][])
    {
        int n = grid.length;
        int m = grid[0].length;

        // Base Cases :
        if(sr < 0 || sc < 0 || sr >= n || sc >= m) return Integer.MAX_VALUE; // If index out of bound.
        if(sr == n-1 && sc == m-1) return grid[sr][sc]; // if at destination.
        // if we calculated already then no need to recalculate.
        if(dp[sr][sc] != -1) return dp[sr][sc]; 

        // Opeartions : 
        int right = solve(sr, sc + 1, grid, dp); // move right side
        int bottom = solve(sr + 1, sc, grid, dp); // move bottom side
        dp[sr][sc] = Math.min(right, bottom) + grid[sr][sc]; // find min and self
        return dp[sr][sc]; // return min path
    }
    public int minPathSum(int[][] grid) 
    {
        int n = grid.length;
        int m = grid[0].length;
        // dp array for memoization.
        int dp[][] = new int[n][m];
        for(int[] row : dp) Arrays.fill(row, -1);
        return solve(0,0,grid,dp);
    }
}
