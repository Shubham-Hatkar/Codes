// 1372. Longest ZigZag Path in a Binary Tree
// https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/description/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    HashMap<TreeNode,int[]> hm;
    int max;
    private void solve(TreeNode root)
    {
        if(root == null) return;
        if(root.left == null && root.right == null) 
        {
            hm.put(root, new int[]{0,0});
            return;
        }

        solve(root.left);
        solve(root.right);

        int left = 0, right = 0;
        if(hm.containsKey(root.left)) 
            left = hm.get(root.left)[1] + 1; // right after left so took arr[1]
        if(hm.containsKey(root.right)) 
            right = hm.get(root.right)[0] + 1; // left after right so took arr[0]
        hm.put(root, new int[]{left, right});
        max = Math.max(max, Math.max(left,right));
    }
    public int longestZigZag(TreeNode root) 
    {
        hm = new HashMap<>();
        max = 0;
        solve(root);
        return max;
    }
}
