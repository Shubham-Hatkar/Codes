// 213. House Robber II
// https://leetcode.com/problems/house-robber-ii/description/

class Solution 
{
     private int solve(int idx, int arr[], int dp[])
    {
        if(idx < 0) return 0; // if idx - 2 goes below 0 so return 0.

        if(idx == 0) return arr[0]; // if we not pick idx1 then we will pick idx-0

        if(dp[idx] != -1) return dp[idx]; // if we already calculated.

        // pick and Not pick approach for subsequence.
        int pick = arr[idx] + solve(idx - 2, arr, dp);
        int notpick = 0 + solve(idx - 1, arr, dp);
        
        dp[idx] = Math.max(pick, notpick); // Need Maximum
        
        return dp[idx]; // Return maximum
    }
    public int rob(int[] nums) 
    {
        int n = nums.length;
        if(n == 1) return nums[0];

        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);

        int arr[] = new int[nums.length-1];
        for(int i = 1; i < nums.length; i++)
            arr[i-1] = nums[i];

        int dp2[] = new int[arr.length+1];
        Arrays.fill(dp2,-1);
        return Math.max(solve(n-2, nums, dp), solve(arr.length - 1, arr, dp2));
    }
}
