// Bitonic Point

class Solution 
{
    int findMaximum(int[] arr, int n) 
    {
        int start = 0;
        int end = n-1;
        
        if(n==2) return (arr[0] > arr[1]) ? arr[0] : arr[1];
        
        while(start <= end)
        {
            int mid = (start + end) / 2;
            
            if(mid+1 < n && mid-1 >=0)
            {
                if(arr[mid] > arr[mid+1] && arr[mid] > arr[mid-1]) return arr[mid];
            }
            // if mid zero
            if(mid == 0 && arr[mid] > arr[mid+1]) return arr[mid];
            // if mid is at end
            else if(mid == n-1 && arr[mid] > arr[mid-1]) return arr[mid];
            
            else if(mid+1 < n && arr[mid+1] > arr[mid]) start = mid + 1;
            else end = mid - 1;
        }
        return 0;
    }
}
