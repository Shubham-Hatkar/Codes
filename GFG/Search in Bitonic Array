// Search in Bitonic Array

public class Solution 
{
    public int peakelement(ArrayList<Integer> A)
    {
        int n = A.size();
        int start = 0;
        int end = n-1;
        
        if(n==2) return (A.get(0) > A.get(1)) ? 0 : 1;
        
        while(start <= end)
        {
            int mid = (start + end) / 2;
            if(mid+1 < n && mid-1 >= 0)
            {
                if(A.get(mid) > A.get(mid+1) && A.get(mid) > A.get(mid-1)) return mid;
            }
            //if mid at 0
            if(mid == 0)
            {
                if(A.get(mid) > A.get(mid+1)) return mid;
            }
            else if(mid == n-1)
            {
                if(A.get(n-1) > A.get(n-2)) return mid;
            }
            //otherwise
            else if(A.get(mid+1) > A.get(mid)) start = mid + 1;
            else end = mid - 1;
        }
        return 0;
    }
    public int BS(ArrayList<Integer> A, int start, int end, int target)
    {
        while(start <= end)
        {
            int mid = (start+end) / 2;
            if(A.get(mid) == target) return mid;
            else if(A.get(mid) > target) end = mid - 1;
            else start = mid + 1;
        }
        return -1;
    }
    public int solve(ArrayList<Integer> A, int B) 
    {
        int n = A.size();
        int peak = peakelement(A);
        if(A.get(peak) == B) return peak;
        int ans = -2;
        if(B >= A.get(0) && B <= A.get(peak)) 
        {
            ans = BS(A,0,peak,B);
        }
        
        if(ans == -1) 
        {
            int start = peak+1;
            int end = n-1;
            int target = B;
            while(start <= end)
            {
                int mid = (start+end) / 2;
                if(A.get(mid) == target) return mid;
                else if(A.get(mid) > target) start = mid + 1 ;
                else end = mid - 1;
            }
        }
        return ans;
    }
}
