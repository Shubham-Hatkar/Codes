// The Painter's Partition Problem-II

 class Solution
{
    public static boolean isPossible(int arr[], long target, long required)
    {
        long curr_sum = 0;
        long count = 1;
        
        for(int i=0; i<arr.length; i++)
        {
            if(arr[i] > target) return false;
            
            if(curr_sum + arr[i] > target)
            {
                count++;
                curr_sum = arr[i];
                if(count > required) return false;
            }
            else curr_sum += arr[i];
        }
        return (count <= required);
    }
    static long minTime(int[] arr,int n,int k)
    {
        long max = 0;
        for(int i=0; i<n; i++) max += arr[i];
        
        long start = 0;
        long end = max;
        long ans = -1;
        while(start <= end)
        {
            long mid = (start + end) / 2;
            if(isPossible(arr,mid,k))
            {
                ans = mid;
                end = mid - 1;
            }
            else start = mid + 1;
        }
        return ans;
    }
}


