// 74. Search a 2D Matrix
// https://leetcode.com/problems/search-a-2d-matrix/description/

class Solution 
{
    int floor(int matrix[][], int target)
    {
        int start = 0;
        int end = matrix.length - 1;
        int ans = -1;

        while(start <= end)
        {
            int mid = (start + end)/2;

            if(matrix[mid][0] == target) return mid;
            else if(matrix[mid][0] < target) 
            {
                ans = mid;
                start = mid + 1;
            }
            else end = mid - 1;
        }
        return ans;
    }
    boolean BS(int matrix[][], int target, int row)
    {
        int start = 0;
        int end = matrix[0].length - 1; //finding in one row means travelling through all cols

        while(start <= end)
        {
            int mid = (start + end)/2;
            if(matrix[row][mid] == target) return true;
            else if(matrix[row][mid] < target) start = mid + 1;
            else end = mid - 1;
        }
        return false;
    }
    public boolean searchMatrix(int[][] matrix, int target) 
    {
        //find the row in which target may be present
        int row = floor(matrix,target);
        if(row == -1) return false;
        return BS(matrix,target,row);
    }
}



 //// **********Brute force approach
        // for(int i=0;i<arr.length;i++)
        // {
        //     for(int j=0;j<arr[0].length;j++)
        //     {
        //         if(arr[i][j]==target)
        //         {
        //             return true;
        //         }
        //     }
        // }
        // return false;
        
        
        ////*********** */ 2nd approach : -
        // int i = 0;
        // int j = (arr[0].length)-1;
        // while(i<arr.length && j>=0)
        // {
        //     if(arr[i][j]==target)
        //     {
        //         return true;
        //     }
        //     else if(arr[i][j]>target)
        //     {
        //         j--;
        //     }
        //     else
        //     {
        //         i++;
        //     }
        // }
        // return false;

///////************3rd and optimal approach */
    //     public boolean searchMatrix(int[][] arr, int target) 
    // {
    //    int rows = arr.length;
    //    int cols = arr[0].length;
    //    int start = 0;
    //    int end = (rows*cols) - 1;

    //    while(start <= end)
    //    {
    //        int mid = (start + end)/2;
    //        int r = mid / cols;
    //        int c = mid % cols;

    //        if(arr[r][c] == target) return true;
    //        else if(arr[r][c] < target) start = mid + 1;
    //        else end = mid - 1;
    //    }
    //    return false;
    // }
