// 93. Restore IP Addresses
// https://leetcode.com/problems/restore-ip-addresses/description/

class Solution 
{
    private boolean isValid(String s)
    {
        if(s.charAt(0) == '0') return false;
        return (Integer.valueOf(s) <= 255);
    }
    private void helper(String s, int i, int partition, String path, List<String> ans)
    {
        if(i == s.length() || partition == 4)
        {
            if(i == s.length() && partition == 4)
                ans.add(path.substring(0, path.length() - 1));
            return;
        }

        helper(s, i + 1, partition + 1, path + s.charAt(i) + ".", ans);

        if(i + 2 <= s.length() && isValid(s.substring(i, i + 2)))
            helper(s, i + 2, partition + 1, path + s.substring(i, i + 2) + ".", ans);

        if(i + 3 <= s.length() && isValid(s.substring(i, i + 3)))
            helper(s, i + 3, partition + 1, path + s.substring(i, i + 3) + ".", ans);
    }
    public List<String> restoreIpAddresses(String s) 
    {
        List<String> ans = new ArrayList<>();
        helper(s, 0, 0, "", ans);
        return ans;
    }
}
